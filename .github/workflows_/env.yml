name: ENV Variables

on: [pull_request]
# on: push
env:
  WF_ENV: Available to all jobs
  BOT_NAME: "My Bot"
  BOT_EMAIL: my-bot@bot.com

jobs:
  decrypt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.0.0
      - name: Decrypt file
        run: |
          gpg --quiet --batch --yes --decrypt --passphrase="$PASSPHRASE" --output $HOME/secret.json secret.json.gpg
        # ls -lah $HOME
        env:
          PASSPHRASE: ${{ secrets.PASSPHRASE }}
      - name: Print our file content
        run: |
          cat $HOME/secret.json
        # ls -lah $HOME
  build-random-issue:
    # if: ${{ '(git log -1 --pretty="format:%ce")' != 'BOT_EMAIL' }} 1
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Setup SSH Keys
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Initial Setup
        run: |
          git init
          git remote add origin git@github.com:${GITHUB_REPOSITORY}.git
          git config --global user.name "${{ env.BOT_NAME }}"
          git config --global user.email "${{ env.BOT_EMAIL }}"
          git fetch
          git checkout master
          git branch --set-upstream-to=origin/master
          git pull
      - name: Create an ENV variable to get the last commit email
        run: echo "LAST_COMMIT_EMAIL=$(git log -1 --pretty="format:%ce")" >> $GITHUB_ENV
      - name: Create and Push a Random File
        run: |
          if [ "${{ env.LAST_COMMIT_EMAIL }}" != "${{ env.BOT_EMAIL }}" ]
          then
            pwd
            ls -a
            echo $RANDOM >> random.txt
            ls -a
            git add -A
            git commit -m "Random file"
            git push
          fi
      - name: Create Issue Using REST API
        run: |
          if [ "${LAST_COMMIT_EMAIL}" != "${BOT_EMAIL}" ]
          then
            curl --request POST \
            --url https://api.github.com/repos/${{ github.repository }}/issues \
            --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            --header 'content-type: application/json' \
            --data '{
              "title": "Automated issue for commit: ${{ github.sha }}",
              "body": "This issue was automatically created by the GitHub Action workflow **${{ github.workflow }}**. \n\n The commit hash was: _${{ github.sha }}_."
              }' \
            --fail
          fi
  log-env:
    runs-on: ubuntu-latest
    env:
      JOB_ENV: Available to all steps in the log-env job
    steps:
      - name: Log ENV Variables
        env:
          STEP_ENV: Available to only this step
        run: |
          echo "WF_ENV: ${WF_ENV}"
          echo "JOB_ENV: ${JOB_ENV}"
          echo "STEP_ENV: ${STEP_ENV}"
      - name: Log ENV 2
        run: |
          echo "WF_ENV: ${WF_ENV}"
          echo "JOB_ENV: ${JOB_ENV}"
          echo "STEP_ENV: ${STEP_ENV}"
  log-default-env:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 14
      - run: npm i @actions/core jsonwebtoken

      - name: Using setup-node action
        id: environment
        run: |
          const core = require('@actions/core');
          const jwt = require('jsonwebtoken');
          (async function() {
            const id_token = await core.getIDToken();
            decoded = jwt.decode(id_token , {complete: true});
            core.setOutput("environment", decoded.payload.environment);
            console.log(decoded.payload.environment)
          })()
        shell: node {0}

      - name: Default ENV Variables
        run: |
          echo "HOME: ${HOME}"
          echo "GITHUB_WORKFLOW: ${GITHUB_WORKFLOW}"
          echo "GITHUB_ACTION: ${GITHUB_ACTION}"
          echo "GITHUB_ACTIONS: ${GITHUB_ACTIONS}"
          echo "GITHUB_ACTOR: ${GITHUB_ACTOR}"
          echo "GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}"
          echo "GITHUB_EVENT_NAME: ${GITHUB_EVENT_NAME}"
          echo "GITHUB_WORKSPACE: ${GITHUB_WORKSPACE}"
          echo "GITHUB_SHA: ${GITHUB_SHA}"
          echo "GITHUB_REF: ${GITHUB_REF}"
          echo "WF_ENV: ${WF_ENV}"
          echo "JOB_ENV: ${JOB_ENV}"
          echo "STEP_ENV: ${STEP_ENV}"
          echo '${{ github.env }}'
          echo "ENVIRONMENT: ${{ env.SERVER }}"
        # echo "GITHUB_ENVIRONMENT_NAME=${{ jobs.log-default-env.environment }}" >> $GITHUB_ENV
        # echo "ENVIRONMENT: ${{ env.GITHUB_ENVIRONMENT_NAME }}"
